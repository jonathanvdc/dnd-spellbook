{"version":3,"sources":["model/spell-linter.ts","LinterResults.tsx"],"names":["checks","spell","hasMatsDesc","components","materials_needed","length","material","severity","message","source","results","higher_levels","description","includes","push","lowerDesc","toLowerCase","search","exec","document","pages","thumbnail_url","thumbnail_source","LinterResults","diagnostics","spells","check","lint","this","props","errorList","className","map","d","to","createSpellUrl","name","PureComponent"],"mappings":"sNA8CA,IAAMA,EAAyB,CAW/B,SAAgCC,GAC5B,IAAIC,EAAcD,EAAME,WAAWC,kBAAoBH,EAAME,WAAWC,iBAAiBC,OAAS,EAClG,OAAIJ,EAAME,WAAWG,WAAaJ,EACvB,CACH,CACIK,SAAU,QACVC,QAAS,oGACTC,OAAQR,KAGRA,EAAME,WAAWG,UAAYJ,EAC9B,CACH,CACIK,SAAU,QACVC,QAAS,0GACTC,OAAQR,IAIT,IASf,SAAsCA,GAClC,IAAIS,EAA+B,GAC/BT,EAAMU,eACFV,EAAMW,YAAYC,SAASZ,EAAMU,gBACjCD,EAAQI,KAAK,CACTP,SAAU,UACVC,QAAS,wEACTC,OAAQR,IAKpB,IADA,IAAIc,EAAYd,EAAMW,YAAYI,cAClC,MAAiB,CAAC,mBAAoB,oBAAqB,4BAA3D,eAAwF,CAAnF,IACGC,EADK,KACSC,KAAKH,GACnBE,GAAUA,EAAOZ,OAAS,GAC1BK,EAAQI,KAAK,CACTP,SAAU,UACVC,QAAQ,mBAAD,OAAqBS,EAAO,GAA5B,2EACPR,OAAQR,IAIpB,OAAOS,GAOX,SAAwBT,GACpB,IAAKA,EAAMQ,OACP,MAAO,CACH,CACIF,SAAU,UACVC,QAAS,2CACTC,OAAQR,IAKpB,OADUA,EAAMQ,OACPU,SAQGlB,EAAMQ,OAAOW,MASd,GARA,CACH,CACIb,SAAU,UACVC,QAAS,kEACTC,OAAQR,IAZT,CACH,CACIM,SAAU,QACVC,QAAS,qEACTC,OAAQR,KAqBxB,SAA4BA,GACxB,OAAIA,EAAMoB,gBAAkBpB,EAAMqB,iBACvB,CACH,CACIf,SAAU,UACVC,QAAS,wFACTC,OAAQR,IAIT,K,oBCvJTsB,G,wLAEE,IAAIC,EDqBL,SAAcC,GACjB,IAAIf,EAA+B,GADoB,uBAEvD,YAAkBe,EAAlB,+CAA0B,CAAC,IAAlBxB,EAAiB,+BACtB,YAAkBD,EAAlB,+CAA0B,CAAC,IAAlB0B,EAAiB,QACtBhB,EAAQI,KAAR,MAAAJ,EAAO,YAASgB,EAAMzB,MAFJ,oFAF6B,kFAOvD,OAAOS,EC5BeiB,CAAKC,KAAKC,MAAMJ,QAC9BK,EAAmC,IAAvBN,EAAYnB,OACtB,uCACA,wBAAI0B,UAAU,wBACXP,EAAYQ,IAAI,SAAAC,GAAC,OAAI,4BAAI,kBAAC,IAAD,CAAMC,GAAIC,YAAeF,EAAExB,SAAUwB,EAAExB,OAAO2B,MAAlD,KAAgE,2BAAIH,EAAE1B,SAAN,KAAhE,IAAsF0B,EAAEzB,YAEtH,OAAO,6BACH,8CACCsB,O,GAVeO,kBAebd","file":"static/js/3.d5860bb5.chunk.js","sourcesContent":["import { Spell } from \"./spell\";\n\n/**\n * A description of a diagnostic's severity.\n */\nexport type Severity = \"error\" | \"warning\";\n\n/**\n * A diagnostic: a message produced by a linter.\n */\nexport type Diagnostic<T> = {\n    /**\n     * The diagnostic's severity.\n     */\n    severity: Severity;\n    /**\n     * The diagnostic's message.\n     */\n    message: string;\n    /**\n     * The value that gave rise to the diagnostic.\n     */\n    source: T;\n};\n\ntype Check<T> = (source: T) => Diagnostic<T>[];\n\n/**\n * Takes a sequence of spells and applies a number of checks to\n * ensure that the spells are well-formed. Results are returned\n * as a list of diagnostics.\n * @param spells A sequence of spells to process.\n */\nexport function lint(spells: Spell[]): Diagnostic<Spell>[] {\n    let results: Diagnostic<Spell>[] = [];\n    for (let spell of spells) {\n        for (let check of checks) {\n            results.push(...check(spell));\n        }\n    }\n    return results;\n}\n\n/**\n * An enumeration of all checks available to the linter.\n */\nconst checks: Check<Spell>[] = [\n    materialsAreConsistent,\n    higherLevelsNotInDescription,\n    spellHasSource,\n    thumbnailHasSource\n];\n\n/**\n * Checks that a spell's materials description is consistent.\n * @param spell A spell to check.\n */\nfunction materialsAreConsistent(spell: Spell): Diagnostic<Spell>[] {\n    let hasMatsDesc = spell.components.materials_needed && spell.components.materials_needed.length > 0;\n    if (spell.components.material && !hasMatsDesc) {\n        return [\n            {\n                severity: \"error\",\n                message: \"spell states that it requires materials but does not list any in its 'materials_needed' property.\",\n                source: spell\n            }\n        ];\n    } else if (!spell.components.material && hasMatsDesc) {\n        return [\n            {\n                severity: \"error\",\n                message: \"spell states that it does not require materials but lists materials in its 'materials_needed' property.\",\n                source: spell\n            }\n        ];\n    } else {\n        return [];\n    }\n}\n\n/**\n * Checks that the 'higher levels' description does not appear in the normal\n * description.\n * @param spell A spell to check.\n */\nfunction higherLevelsNotInDescription(spell: Spell): Diagnostic<Spell>[] {\n    let results: Diagnostic<Spell>[] = [];\n    if (spell.higher_levels) {\n        if (spell.description.includes(spell.higher_levels)) {\n            results.push({\n                severity: \"warning\",\n                message: \"spell includes 'higher_levels' description in its normal description.\",\n                source: spell\n            });\n        }\n    }\n    let lowerDesc = spell.description.toLowerCase();\n    for (let term of [/at higher levels/, /higher-level slot/, /when you reach \\S* level/]) {\n        let search = term.exec(lowerDesc);\n        if (search && search.length > 0) {\n            results.push({\n                severity: \"warning\",\n                message: `spell mentions '${search[0]}' in its description. Should this be part of the 'higher_levels' field?`,\n                source: spell\n            });\n        }\n    }\n    return results;\n}\n\n/**\n * Checks that a spell has a 'source' property.\n * @param spell A spell to check.\n */\nfunction spellHasSource(spell: Spell): Diagnostic<Spell>[] {\n    if (!spell.source) {\n        return [\n            {\n                severity: \"warning\",\n                message: \"spell does not have a 'source' property.\",\n                source: spell\n            }\n        ];\n    }\n    let src = spell.source as any;\n    if (!src.document) {\n        return [\n            {\n                severity: \"error\",\n                message: \"the 'source' property value does not define a 'document' property.\",\n                source: spell\n            }\n        ];\n    } else if (!spell.source.pages) {\n        return [\n            {\n                severity: \"warning\",\n                message: \"the 'source' property value does not define a 'pages' property.\",\n                source: spell\n            }\n        ];\n    } else {\n        return [];\n    }\n}\n\n/**\n * Checks that a spell lists a source for its thumbnail, provided that it\n * has a thumbnail.\n * @param spell A spell to check.\n */\nfunction thumbnailHasSource(spell: Spell): Diagnostic<Spell>[] {\n    if (spell.thumbnail_url && !spell.thumbnail_source) {\n        return [\n            {\n                severity: \"warning\",\n                message: \"spell has a 'thumbnail_url' property but no accompanying 'thumbnail_source' property.\",\n                source: spell\n            }\n        ];\n    } else {\n        return [];\n    }\n}\n","import React, { PureComponent } from \"react\";\nimport { Spell } from \"./model/spell\";\nimport { lint } from \"./model/spell-linter\";\nimport { Link } from \"react-router-dom\";\nimport { createSpellUrl } from \"./SpellLink\";\nimport \"./LinterResults.css\";\n\n/**\n * A component that displays linter results for spells.\n */\nclass LinterResults extends PureComponent<{ spells: Spell[] }> {\n    render() {\n        let diagnostics = lint(this.props.spells);\n        let errorList = diagnostics.length === 0\n            ? \"Nothing to report. Have a great day!\"\n            : <ol className=\"LinterDiagnosticList\">\n                {diagnostics.map(d => <li><Link to={createSpellUrl(d.source)}>{d.source.name}</Link>: <b>{d.severity}:</b> {d.message}</li>)}\n            </ol>;\n        return <div>\n            <h1>Linter results</h1>\n            {errorList}\n        </div>;\n    }\n}\n\nexport default LinterResults;\n"],"sourceRoot":""}