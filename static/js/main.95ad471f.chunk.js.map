{"version":3,"sources":["model/spell.ts","SpellCard.tsx","Tilt.tsx","SpellThumbnail.tsx","SpellLink.tsx","Spellbook.tsx","FilterableSpellbook.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["allClasses","getSpellThumbnailUrl","spell","thumbnail_url","school","sortedLevels","sortedSchools","sortBy","list","getKey","sort","a","b","x","y","groupBy","sortedGroups","bins","Map","value","key","bin","get","set","push","levelSpellPairs","values","spellsBySchool","spells","s","name","map","getSpellId","whitelist","enc","dash","toLowerCase","c","test","html_whitelist","SpellCard","components","this","props","verbal","somatic","material","className","casting_time","range","join","duration","elems","mats","materials_needed","length","createFactFootnote","classes","hide_links","children","to","href","node","type","trim","startsWith","item","is_in_html_whitelist","description","updatedDesc","replace","renderers","link","renderLink","bind","source","allowNode","escapeHtml","unwrapDisallowed","baseDesc","formatDescription","higher_levels","src","pageAttribution","pages","document","thumbnailUrl","alt","createPropertiesGrid","createDescription","createFootnotes","createSourceCitation","PureComponent","Tilt","width","height","left","top","transitionTimeout","updateCall","element","settings","reverse","state","style","Object","assign","max","perspective","easing","scale","speed","transition","axis","reset","options","findDOMNode","myNode","setTimeout","parentElement","querySelector","onPointerEnter","clearTimeout","cancelAnimationFrame","e","updateElementPosition","setState","willChange","setTransition","window","requestAnimationFrame","transform","persist","update","onPointerMove","onPointerLeave","nativeEvent","clientX","clientY","_x","Math","min","_y","tiltX","toFixed","tiltY","percentageX","percentageY","rect","getBoundingClientRect","offsetWidth","offsetHeight","getValues","Component","SpellThumbnail","undefined","showImage","SpellLink","spellLink","linkImage","isMobile","followCursor","shiftX","shiftY","Trigger","Hover","SpellLinkPlaceholder","Spellbook","headerClass","isFirefox","level","spellsByLevel","levelSpells","levelName","spellListItems","first","once","placeholder","localStorageKey","FilterableSpellbook","savedState","localStorage","getItem","JSON","parse","setItem","stringify","newClasses","filter","includes","updateClasses","val","some","usefulClasses","ToggleButtonGroup","onChange","vals","toggleClass","ToggleButton","getFilteredSpells","allSpells","App","fetch","then","response","json","exact","path","component","MainScreenRouter","SpellRoute","isSearching","query","searchingNow","obj","history","searchData","searchBox","data","fuseConfigs","keys","onSearchChange","onSelect","onSearchSelect","find","match","params","spellId","thumbStyle","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.95ad471f.chunk.js","sourcesContent":["export type Class =\n    \"barbarian\" | \"bard\" | \"cleric\"\n    | \"druid\" | \"fighter\" | \"monk\"\n    | \"paladin\" | \"ranger\" | \"rogue\"\n    | \"sorcerer\" | \"warlock\" | \"wizard\";\n\nexport const allClasses: Class[] = [\n    \"barbarian\", \"bard\", \"cleric\",\n    \"druid\", \"fighter\", \"monk\",\n    \"paladin\", \"ranger\", \"rogue\",\n    \"sorcerer\", \"warlock\", \"wizard\"\n];\n\n/**\n * The components required to cast a spell.\n */\nexport type SpellComponents = {\n    /**\n     * Tells if the spell has any material components.\n     */\n    material: boolean;\n    /**\n     * A list of materials needed to cast the spell.\n     */\n    materials_needed?: string[];\n    /**\n     * A raw description of a spell's components, formatted\n     * as a string.\n     */\n    raw: string;\n    /**\n     * Tells if a spell has a somatic component.\n     */\n    somatic: boolean;\n    /**\n     * Tells if a spell has a verbal component.\n     */\n    verbal: boolean;\n};\n\nexport type SpellLevel = \"cantrip\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\";\n\nexport type School = \"abjuration\" | \"conjuration\" | \"divination\" | \"enchantment\"\n    | \"evocation\" | \"illusion\" | \"necromancy\" | \"transmutation\";\n\n/**\n * Gets a URL to a particular spell's thumbnail.\n * @param spell The spell to find a thumbnail for.\n */\nexport function getSpellThumbnailUrl(spell: Spell): string {\n    if (spell.thumbnail_url) {\n        return spell.thumbnail_url;\n    } else {\n        // If we don't have a thumbnail for the spell, then we'll\n        // just create a URL that points to the school's thumbnail.\n        return `images/schools/${spell.school}.svg`;\n    }\n}\n\nconst sortedLevels: SpellLevel[] = [\"cantrip\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\nconst sortedSchools: School[] = [\n    \"abjuration\", \"conjuration\", \"divination\", \"enchantment\",\n    \"evocation\", \"illusion\", \"necromancy\", \"transmutation\"\n];\n\nfunction sortBy<T>(list: T[], getKey: (val: T) => any): T[] {\n    return list.sort((a, b) => {\n        let x = getKey(a);\n        let y = getKey(b);\n        return +(x > y) - +(y > x);\n    });\n}\n\nfunction groupBy<T, TKey>(\n    list: T[],\n    sortedGroups: TKey[],\n    getKey: (val: T) => TKey):\n    { key: TKey, values: T[] }[] {\n\n    let bins = new Map<TKey, T[]>();\n    for (let value of list) {\n        let key = getKey(value);\n        let bin = bins.get(key);\n        if (!bin) {\n            bin = [];\n            bins.set(key, bin);\n        }\n        bin.push(value);\n    }\n\n    let levelSpellPairs: { key: TKey, values: T[] }[] = [];\n    for (let key of sortedGroups) {\n        let values = bins.get(key);\n        if (values) {\n            levelSpellPairs.push({ key, values });\n        }\n    }\n    return levelSpellPairs;\n}\n\n/**\n * Groups a list of spells by level.\n * @param spells A list of spells to group.\n */\nexport function spellsByLevel(spells: Spell[]): { level: SpellLevel, spells: Spell[] }[] {\n    return groupBy(sortBy(spells, s => s.name), sortedLevels, s => s.level)\n        .map(({ key, values }) => ({ level: key, spells: values }));\n}\n\n/**\n * Groups a list of spells by school.\n * @param spells A list of spells to group.\n */\nexport function spellsBySchool(spells: Spell[]): { school: School, spells: Spell[] }[] {\n    return groupBy(sortBy(spells, s => s.name), sortedSchools, s => s.school)\n        .map(({ key, values }) => ({ school: key, spells: values }));\n}\n\n/**\n * A description of a spell's source.\n */\nexport type SpellSource = {\n    /**\n     * The document in which the spell was originally described.\n     */\n    document: string;\n\n    /**\n     * The pages in the document that describe the spell.\n     */\n    pages?: string;\n};\n\n/**\n * A description of a spell.\n */\nexport type Spell = {\n    /**\n     * The amount of time it takes to cast the spell.\n     */\n    casting_time: string;\n\n    /**\n     * A list of all classes that can cast the spell.\n     */\n    classes: Class[];\n\n    /**\n     * The spell's components.\n     */\n    components: SpellComponents;\n\n    /**\n     * A description of the spell's effect.\n     */\n    description: string;\n\n    /**\n     * An optional description of what the spell does at higher levels.\n     */\n    higher_levels?: string;\n\n    /**\n     * A description of the spell's duration.\n     */\n    duration: string;\n\n    /**\n     * The spell's level.\n     */\n    level: SpellLevel;\n\n    /**\n     * The spell's name.\n     */\n    name: string;\n\n    /**\n     * The spell's range.\n     */\n    range: string;\n\n    /**\n     * Tells if the spell can be cast as a ritual.\n     */\n    ritual: boolean;\n\n    /**\n     * The school of magic to which the spell belongs.\n     */\n    school: School;\n\n    /**\n     * A list of tags.\n     */\n    tags: string[];\n\n    /**\n     * The spell's type.\n     */\n    type: string;\n\n    /**\n     * An optional URL to the spell's thumbnail.\n     */\n    thumbnail_url?: string;\n\n    /**\n     * An optional accent color for the spell.\n     */\n    accent_color?: string;\n\n    /**\n     * The document in which the spell was originally described.\n     */\n    source?: SpellSource;\n};\n\n/**\n * Gets an identifier for a spell that is safe for use in a URL.\n * @param spell The spell to get an identifier for.\n */\nexport function getSpellId(spell: Spell): string {\n    let name = spell.name;\n    const whitelist = /[0-9a-zA-Z]/;\n    let enc = '';\n    let dash = false;\n    for (let c of name.toLowerCase()) {\n        if (whitelist.test(c)) {\n            enc += c;\n            dash = false;\n        } else if (!dash) {\n            enc += '-';\n            dash = true;\n        }\n    }\n    return enc;\n}\n","import React, { PureComponent } from \"react\";\nimport { Spell, getSpellThumbnailUrl } from \"./model/spell\";\nimport ReactMarkdown from \"react-markdown\";\nimport { Link } from \"react-router-dom\";\nimport \"./SpellCard.css\";\nimport \"./hr.css\";\n\ntype Props = {\n    spell: Spell;\n    hide_links?: boolean;\n};\n\nconst html_whitelist = [\n    'b', 'i', 'strong', 'br', 'p', 'span', 'div'\n];\n\nfunction is_in_html_whitelist(value: string): boolean {\n    value = value.trim();\n    if (value.startsWith('<')) {\n        for (let item of html_whitelist) {\n            if (value === `<${item}>` || value === `</${item}>` || value === `<${item}/>`) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * A card that describes a spell.\n */\nclass SpellCard extends PureComponent<Props> {\n    /**\n     * Create a \"quick stats\" grid to include in the card.\n     */\n    createPropertiesGrid() {\n        let components = [];\n        if (this.props.spell.components.verbal) {\n            components.push(\"V\");\n        }\n        if (this.props.spell.components.somatic) {\n            components.push(\"S\");\n        }\n        if (this.props.spell.components.material) {\n            components.push(\"M\");\n        }\n        return <div className=\"SpellPropertiesGrid\">\n            <div className=\"SpellPropertyItem\">\n                <div className=\"SpellPropertyItemName\">Casting time</div>\n                <div>{this.props.spell.casting_time}</div>\n            </div>\n            <div className=\"SpellPropertyItem\">\n                <div className=\"SpellPropertyItemName\">Range</div>\n                <div>{this.props.spell.range}</div>\n            </div>\n            <div className=\"SpellPropertyItem\">\n                <div className=\"SpellPropertyItemName\">Components</div>\n                <div>{components.join(\", \")}</div>\n            </div>\n            <div className=\"SpellPropertyItem\">\n                <div className=\"SpellPropertyItemName\">Duration</div>\n                <div>{this.props.spell.duration}</div>\n            </div>\n        </div>;\n    }\n\n    createFactFootnote(key: string, value: any) {\n        return <div className=\"SpellFootnote\"><span className=\"SpellPropertyItemName\">{key}:</span> {value}</div>;\n    }\n\n    /**\n     * Creates an \"additional facts\" sheet, which is essentially a collection\n     * of footnotes.\n     */\n    createFootnotes(): JSX.Element[] {\n        let elems: JSX.Element[] = [];\n        let mats = this.props.spell.components.materials_needed;\n        if (mats && mats.length > 0) {\n            elems.push(this.createFactFootnote(\"Materials\", mats.join(\"; \")));\n        }\n        elems.push(this.createFactFootnote(\"Classes\", this.props.spell.classes.join(\", \")));\n        return elems;\n    }\n\n    private renderLink(props: { href: string, title: string, children: any[] }) {\n        if (this.props.hide_links) {\n            return <span>{props.children}</span>;\n        } else {\n            return <Link to={props.href}>{props.children}</Link>;\n        }\n    }\n\n    private allowNode(node: any): boolean {\n        if (node.type === \"html\") {\n            return is_in_html_whitelist(node.value);\n        } else {\n            return true;\n        }\n    }\n\n    private formatDescription(description: string): JSX.Element {\n        let updatedDesc = description.replace(/\\\\n/g, \"\\n\");\n        let renderers = {\n            link: this.renderLink.bind(this)\n        };\n        return <ReactMarkdown\n            className=\"SpellDescription\"\n            source={updatedDesc}\n            renderers={renderers}\n            allowNode={this.allowNode.bind(this)}\n            escapeHtml={false}\n            unwrapDisallowed={true} />;\n    }\n\n    /**\n     * Creates a textual description of the spell.\n     */\n    createDescription(): JSX.Element {\n        let baseDesc = this.formatDescription(this.props.spell.description);\n        if (this.props.spell.higher_levels) {\n            return <div>\n                {baseDesc}\n                <hr/>\n                {this.formatDescription(this.props.spell.higher_levels)}\n            </div>;\n        } else {\n            return baseDesc;\n        }\n    }\n\n    createSourceCitation(): JSX.Element[] {\n        let src = this.props.spell.source;\n        if (src) {\n            let pageAttribution = src.pages\n                ? \", p. \" + src.pages\n                : \"\";\n\n            return [\n                this.createFactFootnote(\"Source\", <span><i>{src.document}</i>{pageAttribution}.</span>)\n            ];\n        } else {\n            return [];\n        }\n    }\n\n    render() {\n        let thumbnailUrl = getSpellThumbnailUrl(this.props.spell);\n        return <div className=\"SpellCardPanel\">\n            <img className=\"SpellCardThumbnail\" src={thumbnailUrl} alt={this.props.spell.name + \" thumbnail\"} />\n            <div className=\"SpellType\">{this.props.spell.type}</div>\n            <div className=\"SpellName\">{this.props.spell.name}</div>\n            <hr/>\n            {this.createPropertiesGrid()}\n            <hr/>\n            {this.createDescription()}\n            <hr/>\n            {this.createFootnotes()}\n            {this.createSourceCitation()}\n        </div>;\n    }\n}\n\nexport default SpellCard;\n","// Based on jonathandion's react-tilt component, licensed under the MIT license.\n\nimport React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\n\ntype Settings = {\n  reverse: boolean,\n  max: number,\n  perspective: number,\n  easing: string,\n  scale: string,\n  speed: number,\n  transition: number,\n  axis: any,\n  reset: boolean,\n};\n\ntype Props = {\n  onPointerEnter?: (e?: React.PointerEvent) => {},\n  onPointerMove?: (e: React.PointerEvent) => {},\n  onPointerLeave?: (e: React.PointerEvent) => {},\n  options?: Settings,\n  className?: string,\n  style?: React.StyleHTMLAttributes<HTMLDivElement>\n};\n\ntype State = {\n  style: React.StyleHTMLAttributes<HTMLDivElement>\n};\n\nclass Tilt extends Component<Props, State> {\n  private width: number | null;\n  private height: number | null;\n  private left: number | null;\n  private top: number | null;\n  private transitionTimeout: number | null;\n  private updateCall: number | null;\n  private element: any;\n  private settings: Settings;\n  private reverse: number;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      style: {}\n    }\n\n    const defaultSettings = {\n      reverse: false,\n      max: 35,\n      perspective: 1000,\n      easing: \"cubic-bezier(.03,.98,.52,.99)\",\n      scale: \"1.1\",\n      speed: 1000,\n      transition: true,\n      axis: null,\n      reset: true\n    };\n\n    this.width = null;\n    this.height = null;\n    this.left = null;\n    this.top = null;\n    this.transitionTimeout = null;\n    this.updateCall = null;\n    this.element = null;\n    this.settings = Object.assign({}, defaultSettings, this.props.options);\n    this.reverse = this.settings.reverse ? -1 : 1;\n  }\n\n  componentDidMount() {\n    this.element = findDOMNode(this);\n    const myNode = this.element;\n    setTimeout(() => {\n      if (myNode.parentElement.querySelector(':hover') === myNode) {\n        this.onPointerEnter();\n      }\n    }, 0);\n  }\n\n  componentWillUnmount() {\n    if (this.transitionTimeout !== null) {\n      clearTimeout(this.transitionTimeout);\n    }\n    if (this.updateCall !== null) {\n      cancelAnimationFrame(this.updateCall);\n    }\n  }\n\n  onPointerEnter(e?: React.PointerEvent) {\n    this.updateElementPosition();\n\n    this.setState(Object.assign({}, this.state, {\n      style: {\n        ...this.state.style,\n        willChange: \"transform\"\n      }\n    }))\n\n    this.setTransition();\n\n    if (this.props.onPointerEnter) {\n      return this.props.onPointerEnter(e);\n    } else {\n      return {};\n    }\n  }\n\n  reset() {\n    window.requestAnimationFrame(() => {\n      this.setState(Object.assign({}, this.state, {\n        style: {\n          ...this.state.style,\n          transform: \"perspective(\" + this.settings.perspective + \"px) rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)\"\n        }\n      }))\n    });\n  }\n\n  onPointerMove(e: React.PointerEvent) {\n    e.persist();\n\n    if (this.updateCall !== null) {\n      window.cancelAnimationFrame(this.updateCall);\n    }\n\n    // this.event = e;\n    this.updateCall = requestAnimationFrame(this.update.bind(this, e));\n\n    if (this.props.onPointerMove) {\n      return this.props.onPointerMove(e);\n    } else {\n      return {};\n    }\n  }\n\n  setTransition() {\n    if (this.transitionTimeout !== null) {\n      clearTimeout(this.transitionTimeout);\n    }\n\n    this.setState(Object.assign({}, this.state, {\n      style: {\n        ...this.state.style,\n        transition: this.settings.speed + \"ms \" + this.settings.easing\n      }\n    }))\n\n    this.transitionTimeout = setTimeout(() => {\n      this.setState(Object.assign({}, this.state, {\n        style: {\n          ...this.state.style,\n          transition: ''\n        }\n      }))\n    }, this.settings.speed) as unknown as number;\n  }\n\n  onPointerLeave(e: React.PointerEvent) {\n    this.setTransition();\n\n    if (this.settings.reset) {\n      this.reset();\n    }\n\n    if (this.props.onPointerLeave) {\n      return this.props.onPointerLeave(e);\n    } else {\n      return {};\n    }\n  }\n\n  getValues(e: React.PointerEvent) {\n    const x = (e.nativeEvent.clientX - this.left!) / this.width!;\n    const y = (e.nativeEvent.clientY - this.top!) / this.height!;\n    const _x = Math.min(Math.max(x, 0), 1);\n    const _y = Math.min(Math.max(y, 0), 1);\n\n    const tiltX = (this.reverse * (this.settings.max / 2 - _x * this.settings.max)).toFixed(2);\n    const tiltY = (this.reverse * (_y * this.settings.max - this.settings.max / 2)).toFixed(2);\n\n    const percentageX = _x * 100\n    const percentageY = _y * 100\n\n    return {\n      tiltX,\n      tiltY,\n      percentageX,\n      percentageY\n    };\n  }\n\n  updateElementPosition() {\n    const rect = this.element.getBoundingClientRect();\n    this.width = this.element.offsetWidth;\n    this.height = this.element.offsetHeight;\n    this.left = rect.left;\n    this.top = rect.top;\n  }\n\n  update(e: React.PointerEvent) {\n    let values = this.getValues(e);\n\n    this.setState(Object.assign({}, this.state, {\n      style: {\n        ...this.state.style,\n        transform: \"perspective(\" + this.settings.perspective + \"px) \" +\n          \"rotateX(\" + (this.settings.axis === \"x\" ? 0 : values.tiltY) + \"deg) \" +\n          \"rotateY(\" + (this.settings.axis === \"y\" ? 0 : values.tiltX) + \"deg) \" +\n          \"scale3d(\" + this.settings.scale + \", \" + this.settings.scale + \", \" + this.settings.scale + \")\"\n      }\n    }))\n\n    this.updateCall = null;\n  }\n\n  render() {\n    const style = Object.assign({}, this.props.style, this.state.style);\n    return <div style={style}\n        className={this.props.className}\n        onPointerEnter={this.onPointerEnter.bind(this)}\n        onPointerMove={this.onPointerMove.bind(this)}\n        onPointerLeave={this.onPointerLeave.bind(this)}>\n        {this.props.children}\n      </div>;\n  }\n}\n\nexport default Tilt;\n","import React, { PureComponent } from \"react\";\nimport { Spell, getSpellThumbnailUrl } from \"./model/spell\";\nimport './SpellThumbnail.css';\n\n/**\n * A thumbnail for a spell.\n */\nclass SpellThumbnail extends PureComponent<{spell: Spell, showImage?: boolean, className?: string }> {\n    render() {\n        let className = `SpellThumbnail SpellThumbnail-${this.props.spell.school}`;\n        if (this.props.className) {\n            className += \" \" + this.props.className;\n        }\n        if (this.props.showImage === undefined || this.props.showImage) {\n            return <img className={className} src={getSpellThumbnailUrl(this.props.spell)} alt=\"\" />;\n        } else {\n            return <div className={className} />;\n        }\n    }\n}\n\nexport default SpellThumbnail;\n","import React, { PureComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { isMobile } from \"react-device-detect\";\nimport ReactHover from \"react-hover\";\nimport Tilt from \"./Tilt\";\nimport { Spell, getSpellId } from \"./model/spell\";\nimport './SpellLink.css';\nimport SpellCard from \"./SpellCard\";\nimport SpellThumbnail from \"./SpellThumbnail\";\n\n/**\n * A reference to a spell, formatted as an image.\n */\nclass SpellLink extends PureComponent<{spell: Spell}> {\n    render() {\n        const hoverOptions = {\n            followCursor: false,\n            shiftX: 20,\n            shiftY: 0\n        };\n        let spellLink = `/spell/${getSpellId(this.props.spell)}`;\n        let linkImage = <Link className=\"SpellLink\" to={spellLink}>\n                <SpellThumbnail className=\"SpellLinkThumbnail\" spell={this.props.spell} />\n                <div>{this.props.spell.name}</div>\n            </Link>;\n        if (isMobile) {\n            return <Tilt>{linkImage}</Tilt>;\n        } else {\n            return <ReactHover options={hoverOptions}>\n                    <ReactHover.Trigger type='trigger'>\n                        {linkImage}\n                    </ReactHover.Trigger>\n                    <ReactHover.Hover type='hover'>\n                        <div className=\"ExtraSpellBox\">\n                            <Link className=\"ExtraSpellLink\" to={spellLink}>\n                                <SpellCard spell={this.props.spell} hide_links />\n                            </Link>\n                        </div>\n                    </ReactHover.Hover>\n                </ReactHover>;\n        }\n    }\n}\n\nexport class SpellLinkPlaceholder extends PureComponent<{spell: Spell}> {\n    render() {\n        let spellLink = `/spell/${getSpellId(this.props.spell)}`;\n        return <Link className=\"SpellLink\" to={spellLink}>\n                <SpellThumbnail className=\"SpellLinkThumbnail\" spell={this.props.spell} showImage={false} />\n                <div>{this.props.spell.name}</div>\n            </Link>;\n    }\n}\n\nexport default SpellLink;\n","import React, { PureComponent } from \"react\";\nimport { Spell, spellsByLevel, spellsBySchool } from \"./model/spell\";\nimport { isFirefox } from \"react-device-detect\";\nimport \"./Spellbook.css\";\nimport \"./hr.css\";\nimport SpellLink, { SpellLinkPlaceholder } from \"./SpellLink\";\nimport LazyLoad from \"react-lazyload\";\n\n/**\n * A component that displays a sequence of spells.\n */\nclass Spellbook extends PureComponent<{ spells: Spell[] }> {\n    render() {\n        let headerClass = \"SpellSchoolHeader Sideways\" + (isFirefox ? \"Firefox\" : \"Other\");\n        let elems = [];\n        for (let { level, spells: levelSpells } of spellsByLevel(this.props.spells)) {\n            let levelName = level === \"cantrip\" ? \"Cantrips\" : `Level ${level} spells`;\n            elems.push(<div className=\"LevelHeader\">{levelName}</div>);\n\n            let spellListItems: JSX.Element[] = [];\n            for (let { school, spells } of spellsBySchool(levelSpells)) {\n                let first = true;\n                for (let spell of spells) {\n                    let item = <div key={spell.name} className=\"SpellListItem\">\n                        <LazyLoad once placeholder={<SpellLinkPlaceholder spell={spell}/>}><SpellLink spell={spell}/></LazyLoad>\n                    </div>;\n                    if (first) {\n                        // Include header in a spell list item, so that the header\n                        // won't get placed alone at the end of a line.\n                        spellListItems.push(<div key={spell.name + '-first'} className=\"FirstSpellListItem\">\n                            <div className={headerClass}>{school}</div>\n                            {item}\n                        </div>);\n                        first = false;\n                    } else {\n                        spellListItems.push(item);\n                    }\n                }\n            }\n            elems.push(<div className=\"SpellList\">{spellListItems}</div>);\n        }\n        return <div className=\"SpellbookPanel\">{elems}</div>;\n    }\n}\n\nexport default Spellbook;\n","import React, { Component } from \"react\";\nimport { Spell, Class, allClasses } from \"./model/spell\";\nimport Spellbook from \"./Spellbook\";\nimport { ToggleButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport \"./FilterableSpellbook.css\";\n\ntype Props = { spells: Spell[] };\ntype State = {\n    classes: Class[]\n};\n\n// TODO: avoid updating local storage here as it breaks composability.\n// Use callbacks instead.\nconst localStorageKey = \"spellbook-filter-state\";\n\nclass FilterableSpellbook extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        let savedState = localStorage.getItem(localStorageKey);\n        if (savedState) {\n            this.state = JSON.parse(savedState);\n        } else {\n            this.state = {\n                classes: []\n            };\n        }\n    }\n\n    updateClasses(values: Class[]) {\n        this.setState({\n            ...this.state,\n            classes: values\n        }, () => {\n            localStorage.setItem(\"spellbook-filter-state\", JSON.stringify(this.state));\n        });\n    }\n\n    toggleClass(key: Class, value: boolean[]) {\n        let newClasses = this.state.classes.filter(x => x !== key);\n        if (value.includes(true)) {\n            newClasses.push(key);\n        }\n        this.updateClasses(newClasses);\n    }\n\n    getFilteredSpells(): Spell[] {\n        return this.props.spells.filter(val =>\n            this.state.classes.length === 0\n            || val.classes.some(c => this.state.classes.includes(c)));\n    }\n\n    render() {\n        let usefulClasses = allClasses\n            .filter(c => this.props.spells.some(s => s.classes.includes(c)));\n        return <div>\n            {usefulClasses.map(c =>\n                    <ToggleButtonGroup type=\"checkbox\" value={[this.state.classes.includes(c)]} onChange={(vals: any) => this.toggleClass(c, vals)}>\n                        <ToggleButton className=\"ClassButton\" value={true}>\n                            <div className=\"ClassButtonPanel\">\n                                <div className=\"ClassImageBorder\">\n                                    <img className=\"ClassThumbnail\" src={`images/classes/${c}.svg`} alt=\"\"/>\n                                </div>\n                                {c}\n                            </div>\n                        </ToggleButton>\n                    </ToggleButtonGroup>)}\n            <Spellbook spells={this.getFilteredSpells()}/>\n        </div>;\n    }\n}\n\nexport default FilterableSpellbook;\n","import React, { Component } from 'react';\nimport { Route, HashRouter } from 'react-router-dom';\nimport ReactSearchBox from 'react-search-box';\nimport './App.css';\nimport { Spell, getSpellId } from './model/spell';\nimport SpellCard from './SpellCard';\nimport FilterableSpellbook from './FilterableSpellbook';\nimport { History } from 'history';\nimport SpellThumbnail from './SpellThumbnail';\n\nlet allSpells: Spell[] = [];\n\nclass App extends Component<{}, Spell[]> {\n  constructor(props: {}) {\n    super(props);\n    this.state = allSpells;\n  }\n\n  componentDidMount() {\n    // Fetch spell database.\n    fetch(\"data/spells.json\")\n    .then(response => response.json())\n    .then(json => {\n      allSpells = json;\n      this.setState(json);\n    });\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Route exact={true} path=\"/\" component={MainScreenRouter} />\n            <Route path=\"/spell/:spellId\" component={SpellRoute} />\n          </header>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\ntype SearchItem = {\n  key: string;\n  value: JSX.Element;\n  spell: Spell;\n};\n\nclass MainScreenRouter extends Component<{ match: any, history: History }, { isSearching: boolean }> {\n  constructor(props: { match: any, history: History }) {\n    super(props);\n\n    this.state = {\n      isSearching: false\n    };\n  }\n\n  onSearchChange(query: string): void {\n    let searchingNow = query.length > 0;\n    if (searchingNow !== this.state.isSearching) {\n      this.setState({\n        ...this.state,\n        isSearching: searchingNow\n      });\n    }\n  }\n\n  onSearchSelect(obj: SearchItem): void {\n    this.props.history.push(`/spell/${getSpellId(obj.spell)}`);\n  }\n\n  render() {\n    let searchData: SearchItem[] = [];\n    for (let spell of allSpells) {\n      searchData.push({\n        key: spell.name,\n        value: <div className=\"SearchItem\">\n          <SpellThumbnail className=\"SearchItemThumbnail\" spell={spell} />\n          <span className=\"SearchItemName\">{spell.name}</span>\n          <span className=\"SearchItemType\">{spell.type}</span>\n        </div>,\n        spell: spell\n      });\n    }\n    let searchBox = <ReactSearchBox\n      placeholder=\"Search spells\"\n      data={searchData}\n      fuseConfigs={{keys: ['key']}}\n      onChange={this.onSearchChange.bind(this)}\n      onSelect={this.onSearchSelect.bind(this)} />;\n\n    return <div>\n      <div key=\"appBar\" className={this.state.isSearching ? \"AppBar AppBar-searching\" : \"AppBar\"}>\n        <h1 className=\"AppTitle\">Spellbook</h1>\n        {allSpells.length > 0 ? searchBox : []}\n      </div>\n      <FilterableSpellbook key=\"spellbook\" spells={allSpells}/>\n    </div>;\n  }\n}\n\nclass SpellRoute extends Component<{ match: any }, any> {\n  render() {\n    if (allSpells.length === 0) {\n      return <div></div>;\n    }\n    let spell = allSpells.find(val => getSpellId(val) === this.props.match.params.spellId);\n    if (spell) {\n      return <div className=\"SpellCardBox\"><SpellCard spell={spell} /></div>;\n    } else {\n      let thumbStyle = {width: \"30px\", height: \"30px\"};\n      return <div>\n        <img style={{...thumbStyle, transform: \"scaleX(-1)\"}} src=\"images/classes/wizard.svg\" alt=\"\" />\n        <img style={thumbStyle} src=\"images/classes/warlock.svg\" alt=\"\" />\n        <img style={thumbStyle} src=\"images/classes/wizard.svg\" alt=\"\" />\n        <h1>Error 404</h1>\n        Spell with ID '{this.props.match.params.spellId}' not found.\n      </div>;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}